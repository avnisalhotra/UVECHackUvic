{"version":3,"sources":["constants/tasklogo.jpg","constants/task.jpg","redux/reducers/ActionTypes.ts","Header.tsx","Footer.tsx","data.ts","Home.tsx","redux/reducers/ActionCreators.tsx","Schedule.tsx","AddTask.tsx","App.tsx","serviceWorker.ts","redux/store.ts","redux/reducers/index.ts","index.tsx"],"names":["module","exports","ActionType","Header","Jumbotron","fluid","className","Navbar","id","light","expand","NavbarToggler","Collapse","navbar","Nav","NavItem","to","NavbarBrand","Media","href","object","src","require","alt","body","heading","Button","outline","Component","connect","Footer","style","display","width","paddingBottom","React","data","mapDispatchToProps","resetFeedbackForm","actions","reset","fetchTasksAction","payload","type","ActionTypes","FETCHTASKS","tasks","Home","props","handleSubmit","bind","toggleModal","state","isModalOpen","axios","method","url","then","response","console","log","msg","alert","values","name","email","messageHtml","message","agree","toString","this","setState","task","category","currentCategory","key","Card","CardBody","CardTitle","title","CardText","description","onClick","Accordion","defaultActiveKey","Toggle","as","eventKey","Body","map","tk","renderTask","reduxState","Schedule","dispatchResetFeedback","addTaskAction","ADDTASK","AddTask","undefined","creator","priority","model","onSubmit","Row","Label","htmlFor","md","Col","text","placeholder","validators","show","messages","required","minLength","maxLength","validEmail","size","offset","value","textarea","color","App","exact","path","component","from","Boolean","window","location","hostname","match","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","rootReducer","combineReducers","currentTasks","action","addTask","createForms","feedback","assignee","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.10e51898.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tasklogo.473fdf13.jpg\";","module.exports = __webpack_public_path__ + \"static/media/task.df84e7b9.jpg\";","\r\nexport type ActionTypes = ActionType; \r\n\r\n\r\nexport enum ActionType{\r\n    ADDTASK          = \"ADDTASK\",\r\n    FETCHTASKS       = \"FETCHTASKS\"\r\n};\r\n\r\nexport default ActionType; \r\n\r\n","import React, {Component} from 'react';\r\nimport {Navbar, NavbarBrand, Nav, \r\n       NavbarToggler,Collapse, NavItem, \r\n       Jumbotron, Button,  Media,  } from 'reactstrap'; \r\nimport {NavLink} from 'react-router-dom';\r\nimport {connect} from 'react-redux'; \r\n//import {toEnglishAction, toSpanishAction} from '../../redux/actions/ActionCreators';\r\n\r\n/* Configure redux state and actions for dispatching */\r\n\r\n  \r\nconst mapStateToProps = ({} : {}) => ({\r\n    \r\n});\r\n  \r\nconst dispatchLanguage  = ({\r\n  \r\n });\r\n\r\n/* Configure local component state and props */\r\n export interface IHeaderProps{\r\n    \r\n}\r\nexport interface IHeaderState{\r\n \r\n}\r\n\r\nexport class Header extends Component<IHeaderProps, IHeaderState> {  \r\n\r\n    render() {\r\n        return (\r\n            \r\n        <Jumbotron fluid>\r\n            <div className=\"container-fluid\">\r\n            <div className=\"row\">\r\n                    <Navbar className=\"navbar-dark sticky\" id=\"navbar\" light expand=\"md\">                                    \r\n                        <NavbarToggler />\r\n                            <Collapse  navbar>\r\n                                <Nav navbar>\r\n                                    <NavItem>\r\n                                        <NavLink className=\"nav-link\" to=\"/home\">\r\n                                            <span className=\"fa fa-home fa-lg\"></span>\r\n                                             <b> Home</b> \r\n\r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink className=\"nav-link\" to=\"/taskschedule\">\r\n                                            <span className=\"fa fa-tasks fa-lg\"></span>\r\n\r\n                                             <b> Task Schedule </b> \r\n                                        </NavLink>\r\n                                    </NavItem>\r\n                                    <NavItem>\r\n                                        <NavLink className=\"nav-link\" to=\"/addtask\">\r\n                                            <span className=\"fa fa-plus fa-lg\"></span>\r\n                                             <b> Add Task </b> \r\n                                        </NavLink>\r\n                                    </NavItem>                                       \r\n                                </Nav>                    \r\n                            </Collapse>\r\n                            <NavbarBrand className=\"navbar-brand\">                                \r\n                                    <h3><b> Welcome</b></h3>                           \r\n                           </NavbarBrand>         \r\n                    </Navbar>                  \r\n                </div>\r\n                \r\n                <div className=\"row justify-content-center\" id=\"pill\"> \r\n                    <div className=\"col-12 col-sm-3 headerContent\">\r\n                            <Media href=\"#\" >\r\n                              <Media object className=\"logo\" src={require(\"./constants/tasklogo.jpg\")} alt=\"Task Tracker Image\" />                           \r\n                           </Media>\r\n                    </div>\r\n                    <div className=\"col-12 col-sm-4 headerContent\">            \r\n                       <Media>                           \r\n                           <Media body>\r\n                               <Media heading>\r\n                                  <><b> JoeAvni's </b><p>Task Tracker</p></>                                \r\n                               </Media>                                    \r\n                                    <p id=\"subheading\">Enjoy the extra time earned through our <br/>task tracker!</p>                               \r\n                           </Media>                           \r\n                       </Media>                      \r\n                       \r\n                    </div>\r\n                    <div className=\"col-12 col-sm-2  headerContent\">\r\n                        <Button outline id=\"button\" >\r\n                            <span className=\"fa fa-sign-in fa-md\">\r\n                               Login\r\n                            </span>\r\n                        </Button>\r\n                    </div>          \r\n                </div>              \r\n            </div>  \r\n        </Jumbotron>    \r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default connect(mapStateToProps, dispatchLanguage)(Header); \r\n\r\n","import React from 'react';\r\nimport {connect} from 'react-redux'; \r\n\r\n/* Configure redux state and actions for dispatching */  \r\nconst mapStateToProps = ({} : {}) => ({ \r\n     \r\n}); \r\n\r\n/* Configure local component state and props */\r\nexport interface IFooterProps {\r\n    \r\n}\r\n\r\nexport interface IFooterState{\r\n    items: Array<any>\r\n}\r\n\r\nexport  class Footer extends React.Component<IFooterProps, IFooterState>{\r\n   \r\n    render(){\r\n        return( \r\n        <div className=\"container-fluid footer \">\r\n                <div className=\"row\">  \r\n                    <div className=\"col-12 justify-center text-center\">\r\n                        <h6> JoeAvniTaskTracker </h6>\r\n                            <img src={require(\"./constants/task.jpg\")} alt=\"task\"  style={{ display: 'block', width: \"125px\", paddingBottom:\"1px\"}}/> \r\n                            {/*this.renderItem(this.props.pharmacist.BusinessAffiliates)\r\n                               TODO: images cannot be imported with require in array format, will have to create static loaders \r\n                            */}\r\n                    </div>                    \r\n\r\n                    <div className=\"col-12 justify-center hours\">          \r\n                           \r\n                            <i className=\"fa fa-envelope fa-lg\"></i> \r\n                            <a href=\"mailto:joeavnitasktracker@gmail.com\"><b> : joeavnitasktracker <br/></b></a>                                             \r\n                    </div> \r\n                </div> \r\n                <div className=\"row justify-content-center\">\r\n                       <p id=\"copyRight\">© Copyright 2020 JoeAvniTaskTracker</p>\r\n                </div>                             \r\n        </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps)(Footer);","export const data = [{\r\n    \"id\": 1,\r\n    \"title\": \"task1\",\r\n    \"description\": \"move item to location b\",\r\n    \"creator\" : \"persona\",\r\n    \"priority\": 1,\r\n    \"currentCategory\": 0,\r\n    \"assignee\" : \"None\",\r\n    \"estimationTime\": 30\r\n},\r\n\r\n{\r\n    \"id\": 2,\r\n    \"title\": \"task2\",\r\n    \"description\": \"move item to location 2\",\r\n    \"creator\" : \"persona\",\r\n    \"priority\": 2,\r\n    \"currentCategory\": 1,\r\n    \"assignee\" : \"None\",\r\n    \"estimationTime\": 70\r\n},\r\n{\r\n    \"id\": 3,\r\n    \"title\": \"task3\",\r\n    \"description\": \"move item to location b\",\r\n    \"creator\" : \"persona\",\r\n    \"priority\": 1,\r\n    \"currentCategory\": 2,\r\n    \"assignee\" : \"None\",\r\n    \"estimationTime\": 30\r\n},\r\n{\r\n    \"id\": 4,\r\n    \"title\": \"task4\",\r\n    \"description\": \"move item to location b\",\r\n    \"creator\" : \"persona\",\r\n    \"priority\": 1,\r\n    \"currentCategory\": 2,\r\n    \"assignee\" : \"None\",\r\n     \"estimationTime\": 20\r\n},\r\n{\r\n    \"id\": 5,\r\n    \"title\": \"task5\",\r\n    \"description\": \"move item to location b\",\r\n    \"creator\" : \"persona\",\r\n    \"priority\": 1,\r\n    \"currentCategory\":2,\r\n    \"assignee\" : \"None\",\r\n    \"estimationTime\": 60\r\n},\r\n{\r\n    \"id\": 6,\r\n    \"title\": \"task6\",\r\n    \"description\": \"move item to location b\",\r\n    \"creator\" : \"persona\",\r\n    \"priority\": 1,\r\n    \"currentCategory\": 3,\r\n    \"assignee\" : \"None\",\r\n    \"estimationTime\": 50\r\n}, \r\n{\r\n    \"id\": 7,\r\n    \"title\": \"task7\",\r\n    \"description\": \"move item to location b\",\r\n    \"creator\" : \"persona\",\r\n    \"priority\": 1,\r\n    \"currentCategory\": 3,\r\n    \"assignee\" : \"None\",\r\n    \"estimationTime\": 100\r\n}\r\n];","import React from 'react';\r\nimport {Control, Form, Errors, actions,} from 'react-redux-form';\r\nimport {Accordion, Card} from 'react-bootstrap';\r\nimport axios from 'axios'; \r\nimport {connect} from 'react-redux'; \r\nimport {CardImg,  CardText, CardBody,\r\n    CardTitle, Breadcrumb, BreadcrumbItem,\r\n    Button, Label, Col, Row, Modal, ModalHeader, ModalBody } from 'reactstrap';\r\nimport {data} from './data'; \r\nimport {fetchTasksAction} from './redux/reducers/ActionCreators';\r\nimport ModalTask from './ModalTask';\r\n\r\n/* Configure redux state and actions for dispatching */\r\nconst mapStateToProps = (reduxState: any) => ({\r\n     tasks: reduxState.tasks\r\n});\r\n  \r\nconst mapDispatchToProps  = ({\r\n    resetFeedbackForm : () => actions.reset('feedback'),\r\n    fetchTasksAction\r\n });\r\n\r\n\r\nexport interface IHomeProps{\r\n    resetFeedbackForm : ()=>void\r\n    fetchTasksAction: (tasKs : Array<ITask>)=>void\r\n}\r\n\r\nexport interface IHomeState{\r\n    tasks: Array<ITask>,\r\n    isModalOpen: boolean\r\n}\r\n\r\nexport interface ITask{\r\n    id: number,\r\n    title: string, \r\n    description: string,\r\n    creator: string,\r\n    priority: number,\r\n    currentCategory: number,    \r\n    assignee: string,\r\n}\r\n\r\n\r\nexport class Home extends React.Component<IHomeProps, IHomeState>{\r\n    constructor(props : IHomeProps){\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this); \r\n        this.toggleModal = this.toggleModal.bind(this);\r\n\r\n        this.state = {\r\n            tasks: data,\r\n            isModalOpen: false\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios({\r\n            method: \"POST\",\r\n            url: \"http://localhost:3001/getTasks\", \r\n            data:{          \r\n            }\r\n        }).then((response: any)=> { \r\n            console.log(response)\r\n            if (response.data.msg === 'Success'){\r\n                this.props.fetchTasksAction(response.tasks);\r\n            }else if (response.data.msg === 'Fail'){\r\n                console.log(\"Try again\");\r\n                alert(\"Failed to fetch results\")\r\n            }\r\n        })\r\n    }\r\n   \r\n    handleSubmit(values : any){\r\n        console.log(values);\r\n          axios({\r\n           method: \"POST\",\r\n           url: \"http://localhost:3001/Send\", \r\n           data:{\r\n               name: values.name,\r\n               email: values.email,\r\n               messageHtml: values.message + ' \\r\\n Do they agree to a reply: ' + (values.agree !==  '').toString()\r\n               \r\n           }\r\n       }).then((response: any)=> { \r\n           if (response.data.msg === 'Success'){\r\n               console.log(\"Email was sent\");\r\n               this.props.resetFeedbackForm();\r\n           }else if (response.data.msg === 'Fail'){\r\n               console.log(\"Try again\");\r\n           }\r\n       })\r\n    } \r\n    \r\n    toggleModal (){\r\n        this.setState({\r\n            isModalOpen: !this.state.isModalOpen\r\n        });\r\n        /*()=><ModalTask isModalOpen={this.state.isModalOpen} toggleModal={this.toggleModal}/>*/\r\n    } \r\n\r\n    renderTask(task:ITask, category: number){\r\n        return(            \r\n                (task.currentCategory === category ) ? \r\n                <div key={task.id} className=\"col-12 col-md-5 m-1\">            \r\n                    <Card>                                                 \r\n                        <CardBody>\r\n                            <CardTitle>{task.title}</CardTitle>\r\n                            <CardText>{task.description}</CardText>\r\n                            <Button>\r\n                                Move up\r\n                            </Button>\r\n                            <Button>\r\n                                Move Down                                \r\n                            </Button>\r\n                            <Button onClick={this.toggleModal}>\r\n                                Update Task\r\n                            </Button>\r\n                        </CardBody>\r\n                    </Card>\r\n                </div>  \r\n                :\r\n                <></>            \r\n            \r\n        );\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"container content\">                            \r\n               <Accordion defaultActiveKey=\"0\">\r\n                    <Card>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"0\">\r\n                            <h5>Planning</h5>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"0\">\r\n                            <Card.Body>\r\n                                {this.state.tasks.map((tk) => this.renderTask(tk, 0))}\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"1\">\r\n                          <h5>In Progress</h5>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"1\">\r\n                            <Card.Body>\r\n                            {this.state.tasks.map((tk) => this.renderTask(tk, 1))}\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"2\">\r\n                          <h5>Needs Review</h5>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"2\">\r\n                            <Card.Body>\r\n                            {this.state.tasks.map((tk) => this.renderTask(tk, 2))}\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>\r\n                    <Card>\r\n                        <Accordion.Toggle as={Card.Header} eventKey=\"3\">\r\n                          <h5>Finished</h5>\r\n                        </Accordion.Toggle>\r\n                        <Accordion.Collapse eventKey=\"3\">\r\n                            <Card.Body>\r\n                            {this.state.tasks.map((tk) => this.renderTask(tk, 3))}\r\n                            </Card.Body>\r\n                        </Accordion.Collapse>\r\n                    </Card>                  \r\n               </Accordion>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(Home); ","import ActionTypes from './ActionTypes';\r\nimport { ITask } from '../../Home';\r\nexport const fetchTasksAction = (payload : Array<ITask>) => ({\r\n    type : ActionTypes.FETCHTASKS ,   \r\n    tasks: payload\r\n});\r\n\r\nexport const addTaskAction = (payload : ITask) => ({\r\n    type : ActionTypes.ADDTASK ,   \r\n    task: payload\r\n});","import React from 'react';\r\nimport  {Button, Label, Col, Row} from 'reactstrap';\r\nimport {Control, Form, Errors, actions} from 'react-redux-form';\r\nimport axios from 'axios'; \r\nimport {connect} from 'react-redux'; \r\n\r\n/* Configure redux state and actions for dispatching */\r\n\r\nexport interface IScheduleProps{\r\n \r\n}\r\n\r\nexport interface IScheduleState{\r\n}\r\n\r\nexport class Schedule extends React.Component<IScheduleProps, IScheduleState>{\r\n\r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"container content\">                            \r\n                <div className =\"row \">\r\n                  \r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect()(Schedule); ","import React from 'react';\r\nimport  {Button, Label, Col, Row} from 'reactstrap';\r\nimport {Control, Form, Errors, actions, Field} from 'react-redux-form';\r\nimport axios from 'axios'; \r\nimport {connect} from 'react-redux'; \r\nimport {addTaskAction} from './redux/reducers/ActionCreators';\r\nimport { ITask } from './Home';\r\n\r\n/* Configure redux state and actions for dispatching */\r\nconst mapStateToProps = () => ({\r\n     \r\n});\r\n  \r\nconst dispatchResetFeedback  = ({\r\n    resetFeedbackForm : () => actions.reset('feedback'), \r\n    addTaskAction\r\n });\r\n\r\n\r\n/* Configure local component state and props */\r\n\r\n//const required=(val: any) => val && val.length; // checks to see if value greater than 0\r\nconst validEmail = (val: any) => /^[A-Z0-9._%+-]+@[A-Z0-9,-]+\\.[A-Z]{2,4}$/i.test(val)\r\n\r\nexport interface IAddTaskProps{   \r\n    resetFeedbackForm : ()=>void, \r\n    addTaskAction : (Task:ITask)=>void\r\n}\r\n\r\nexport interface IAddTaskState{\r\n}\r\n\r\nexport class AddTask extends React.Component<IAddTaskProps, IAddTaskState>{\r\n    constructor(props : IAddTaskProps){\r\n        super(props);\r\n        this.handleSubmit = this.handleSubmit.bind(this); \r\n    }\r\n\r\n    handleSubmit(values : any){\r\n        console.log(values);\r\n\r\n        if (values !== undefined){           \r\n            this.props.addTaskAction(values)\r\n            this.props.resetFeedbackForm();\r\n        }\r\n         \r\n          axios({\r\n           method: \"POST\",\r\n           url: \"http://localhost:3001/addtask\", \r\n           data:{//Todo: update\r\n               title: values.title,\r\n               creator: values.creator,\r\n               description: values.description, \r\n               priority: values.priority,\r\n               category: values.category\r\n               \r\n           }\r\n       }).then((response: any)=> { \r\n           if (response.data.msg === 'Success'){\r\n               console.log(\"Email was sent\");\r\n               this.props.resetFeedbackForm();\r\n           }else if (response.data.msg === 'Fail'){\r\n               console.log(\"Try again\");\r\n           }\r\n       })\r\n    }  \r\n    \r\n    render(){\r\n        return(\r\n            <div className=\"container content\">                            \r\n                <div className =\"row \">\r\n                  <div className=\"col-12 d-flex justify-content-center\">\r\n                       <h3><b>Add a New Task</b></h3>\r\n                  </div>\r\n                  <div className=\"col-10 offset-1 justify-content-center\">\r\n                      <Form model=\"feedback\" onSubmit={(values:any)=>this.handleSubmit(values)}>                          \r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"title\" md={2}> <b>Title</b> </Label>\r\n                                    <Col md={10}>\r\n                                        <Control.text model=\".title\" id=\"title\" name=\"title\"\r\n                                            placeholder= \"Task Title\" \r\n                                            className = \"form-control\"\r\n                                            validators={{\r\n                                            \r\n                                            }}/>\r\n                                            <Errors \r\n                                                className=\"text-danger\"\r\n                                                model=\".title\"\r\n                                                show=\"touched\"\r\n                                                messages={{\r\n                                                    required: 'Required ',\r\n                                                    minLength: 'Must be greater than 2 characters ',\r\n                                                    maxLength: 'Must be less than 25 characters '\r\n                                                }}/>\r\n                                    </Col>\r\n                                </Row> \r\n                                <Row className=\"form-group\">\r\n                                    <Label htmlFor=\"creator\" md={2}> <b>Name</b> </Label>\r\n                                    <Col md={10}>\r\n                                        <Control.text model=\".creator\" id=\"creator\" name=\"creator\"\r\n                                            placeholder= \"Full Name\" \r\n                                            className = \"form-control\"\r\n                                            validators={{\r\n                                            \r\n                                            }}/>\r\n                                            <Errors \r\n                                                className=\"text-danger\"\r\n                                                model=\".creator\"\r\n                                                show=\"touched\"\r\n                                                messages={{\r\n                                                    required: 'Required ',\r\n                                                    minLength: 'Must be greater than 2 characters ',\r\n                                                    maxLength: 'Must be less than 25 characters '\r\n                                                }}/>\r\n                                    </Col>\r\n                                </Row> \r\n                            \r\n                            <Row className=\"form-group\">\r\n                                <Label htmlFor=\"currentCategory\" md={2}><b>Category</b> </Label>\r\n                                <Col md={10}>\r\n                                    <Control.text model=\".currentCategory\" id=\"currentCategory\" name=\"currentCategory\"\r\n                                        placeholder= \"Optional Category\"\r\n                                        className=\"form-control\"\r\n                                        validators={{                                            \r\n                                        }}/>\r\n                                        <Errors \r\n                                            className=\"text-danger\"\r\n                                            model=\".currentCategory\"\r\n                                            show=\"touched\"\r\n                                            messages={{\r\n                                                required: 'Required ',\r\n                                                validEmail: 'Invalid Email Address'\r\n                                            }}/>\r\n                                </Col>\r\n                                </Row>\r\n                            <Row className=\"form-group\">\r\n                              <Col md={{size:6, offset: 2}}>\r\n                                    <Field model=\".priority\">\r\n                                        <label><input type=\"radio\" value=\"High\"/> High</label>\r\n                                        <label><input type=\"radio\" value=\"Medium\"/> Medium</label>\r\n                                        <label><input type=\"radio\" value=\"Low\"/> Low</label>\r\n                                    </Field>                                  \r\n                              </Col>                                 \r\n                             </Row>\r\n                          <Row className=\"form-group\">\r\n                            <Label htmlFor=\"description\" md={2}> <b>Description</b> </Label>  \r\n                            <Col md={10}>\r\n                                <Control.textarea \r\n                                    model=\".description\" \r\n                                    id=\"description\" \r\n                                    name=\"description\"\r\n                                    className = \"form-control\" \r\n                                     />\r\n                            </Col>                            \r\n                            </Row>\r\n                          <Row className=\"form-group\">\r\n                              <Col md={{size:10, offset:2}}>\r\n                                  <Button \r\n                                        type=\"submit\" \r\n                                        color=\"primary\">\r\n                                             <b>Submit</b>\r\n                                  </Button>\r\n                              </Col>\r\n                          </Row>\r\n                      </Form>\r\n                  </div>\r\n              </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,dispatchResetFeedback)(AddTask); ","import React from 'react';\nimport {Switch, Route, Redirect} from 'react-router';\nimport Header from \"./Header\";\nimport Footer from \"./Footer\"; \nimport Home from \"./Home\";\nimport Schedule from \"./Schedule\";\nimport './App.css'; \nimport  AddTask  from './AddTask';\n\n\nexport default class App extends React.Component{   \n   \n    public render() {\n      return (\n        <>\n          <Header/>\n              <Switch>\n              <Route exact path=\"/home\"      component={()=><Home/>}/> \n              <Route exact path=\"/services\"  component={()=><Schedule/>}/>    \n              <Route exact path=\"/addtask\"  component={()=><AddTask/>}/>   \n              <Redirect from=\"/\" to=\"/home\" />\n              </Switch>\n          <Footer/>\n        </>\n      );\n    }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","/**\r\n * Creates the redux store\r\n */\r\n\r\nimport {createStore, compose, combineReducers } from 'redux';\r\nimport {updateTasks, addTask} from './reducers'; \r\nimport {createForms} from 'react-redux-form';\r\n\r\n\r\n\r\nconst InitialFeedback = {\r\n  name : '',\r\n  title:'',\r\n  creator:'',\r\n  currentCategory:'',\r\n  description: '',\r\n  priority :'',\r\n  assignee: ''\r\n}\r\ndeclare global {\r\n   interface Window {\r\n     __REDUX_DEVTOOLS_EXTENSION_COMPOSE__?: typeof compose;\r\n   }\r\n }\r\n \r\n const composeEnhancers = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n \r\n export const rootReducer = combineReducers({\r\n   tasks    : updateTasks, addTask,   \r\n    ...createForms({\r\n     feedback:InitialFeedback\r\n   }),\r\n });\r\n // This reduxState adds a reduxState : \" \" property to the store\r\n export const store = createStore(\r\n       rootReducer,\r\n       composeEnhancers()\r\n   );\r\n \r\nexport default store; ","import ActionTypes from './ActionTypes';\r\nimport {createSelector} from 'reselect'; \r\nimport { ITask } from '../../Home';\r\n\r\n// This is used to give the application an initial state \r\nconst cartValues = {\r\n    cartSubTotal: 0 ,\r\n    cartTax: 0,\r\n    cartTotal : 0,\r\n}\r\nconst initialState = {   \r\n tasks: []\r\n\r\n}\r\n\r\ninterface IReduxState{\r\n    tasks: Array<ITask>\r\n}\r\n\r\n/* Selectors to return data from redux store */\r\nexport const getTasksSelector  = (reduxState: any) => reduxState.tasks;\r\n\r\n/* Derived selectors to improve memoization */\r\n/* Note: The arguments across selectors have to be the same\r\n         since I have two selectors in [] then the next selector can take\r\n         two arguments\r\n         These functions when called return a selector using reselect which helps in \r\n         memoization and making things faster \r\n*/\r\n\r\n/* Shared action payload */\r\ninterface IReducerAction {\r\n    type: string\r\n}\r\n\r\n/*********** Reducers to change data in redux store  **********/\r\n\r\n\r\n\r\n// To add one product to either detailed product or cart\r\ninterface IAddProductAction extends IReducerAction{\r\n    product : any\r\n    products : Array<any>\r\n}\r\n\r\nconst initialDetailProduct : any = {\r\n    id         :  0,\r\n    name       : \"\",\r\n    description: \"\",\r\n    price      : 0,\r\n    review     : \"\",\r\n    count      : 0,\r\n    total      : 0,\r\n    inCart     :false,\r\n    img        :\"\"\r\n}\r\n\r\n\r\ninterface IUpdateTasksAction extends IReducerAction{\r\n    tasks: Array<ITask>\r\n    \r\n}\r\n\r\ninterface IUpdateTasks{\r\n}\r\nexport const updateTasks = (currentTasks: IUpdateTasks = [], action : IUpdateTasksAction) => {\r\n    switch(action.type){       \r\n        case ActionTypes.FETCHTASKS:\r\n            return action.tasks                    \r\n         default:          \r\n            return currentTasks;\r\n    }\r\n}\r\n\r\ninterface IAddTaskAction extends IReducerAction{\r\n    task: ITask\r\n    \r\n}\r\n\r\n\r\nexport const addTask = (currentTasks: any = {}, action : IAddTaskAction) => {\r\n    switch(action.type){       \r\n        case ActionTypes.FETCHTASKS:\r\n            return [...currentTasks, action.task]                    \r\n         default:          \r\n            return currentTasks;\r\n    }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {HashRouter} from 'react-router-dom';\nimport store from './redux/store'; \nimport 'font-awesome/css/font-awesome.min.css';\nimport 'bootstrap-social/bootstrap-social.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Provider} from 'react-redux'; \n\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <HashRouter>\n        <App />\n      </HashRouter>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}